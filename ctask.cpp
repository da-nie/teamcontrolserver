#include "ctask.h"

//====================================================================================================
//конструктор класса
//====================================================================================================
CTask::CTask(void)
{
 Index=0;
 ForUserGUID="";
 FromUserGUID="";
 ProjectGUID="";
 TaskGUID="";
 Task="";
 State=TASK_STATE_NO_READ;
 cDate.SetDate(0,0,0);
 Answer="";
 AnswerNotRead=false;
 PlannedPosition=false;
 AnswerReferenceExist=false;
 TaskReferenceExist=false;
 AnswerReference="";
 TaskReference="";
 Common=false;
 ChangeCommonState=false;
}
//====================================================================================================
//деструктор класса
//====================================================================================================
CTask::~CTask()
{		
}
//====================================================================================================
//функции класса
//====================================================================================================

//----------------------------------------------------------------------------------------------------
//получиь индекс
//----------------------------------------------------------------------------------------------------
const long& CTask::GetIndex(void) const
{
 return(Index);
}
//----------------------------------------------------------------------------------------------------
//получить уникальный идентификатор от какого пользователя задание
//----------------------------------------------------------------------------------------------------
const CSafeString& CTask::GetFromUserGUID(void) const
{
 return(FromUserGUID);
}
//----------------------------------------------------------------------------------------------------
//получить уникальный идентификатор для какого пользователя задание
//----------------------------------------------------------------------------------------------------
const CSafeString& CTask::GetForUserGUID(void) const
{
 return(ForUserGUID);
}
//----------------------------------------------------------------------------------------------------
//получить уникальный идентификатор проекта
//----------------------------------------------------------------------------------------------------
const CSafeString& CTask::GetProjectGUID(void) const
{
 return(ProjectGUID);
}
//----------------------------------------------------------------------------------------------------
//получить задание
//----------------------------------------------------------------------------------------------------
const CSafeString& CTask::GetTask(void) const
{
 return(Task);
}
//----------------------------------------------------------------------------------------------------
//получиь состояние задания
//----------------------------------------------------------------------------------------------------
const long& CTask::GetState(void) const
{
 return(State);
}
//----------------------------------------------------------------------------------------------------
//получить срок задания
//----------------------------------------------------------------------------------------------------
const CDate& CTask::GetDate(void) const
{
 return(cDate);
}
//----------------------------------------------------------------------------------------------------
//получить уникальный идентификатор задания
//----------------------------------------------------------------------------------------------------
const CSafeString& CTask::GetTaskGUID(void) const
{
 return(TaskGUID);
}
//----------------------------------------------------------------------------------------------------
//получить ответ на задание
//----------------------------------------------------------------------------------------------------
const CSafeString& CTask::GetAnswer(void) const
{
 return(Answer);
}
//----------------------------------------------------------------------------------------------------
//получить ссылку на файл в ответе исполнителя
//----------------------------------------------------------------------------------------------------
const CSafeString& CTask::GetAnswerReference(void) const
{
 return(AnswerReference);
}
//----------------------------------------------------------------------------------------------------
//задать ссылку на файл в задании
//----------------------------------------------------------------------------------------------------
const CSafeString& CTask::GetTaskReference(void) const
{
 return(TaskReference);
}
//----------------------------------------------------------------------------------------------------
//получить, прочитан ли ответ на задание
//----------------------------------------------------------------------------------------------------
bool CTask::GetAnswerNotRead(void) const
{
 return(AnswerNotRead);
}
//----------------------------------------------------------------------------------------------------
//получить, является ли задание плановой позицией
//----------------------------------------------------------------------------------------------------
bool CTask::GetPlannedPosition(void) const
{
 return(PlannedPosition);
}
//----------------------------------------------------------------------------------------------------
//получить, есть ли ссылка в ответе исполнителя
//----------------------------------------------------------------------------------------------------
bool CTask::GetAnswerReferenceExist(void) const
{
 return(AnswerReferenceExist);
}
//----------------------------------------------------------------------------------------------------
//получить, есть ли ссылка в задании
//----------------------------------------------------------------------------------------------------
bool CTask::GetTaskReferenceExist(void) const
{
 return(TaskReferenceExist);
}
//----------------------------------------------------------------------------------------------------
//получить, является ли задание общим
//----------------------------------------------------------------------------------------------------
bool CTask::GetCommon(void) const
{
 return(Common);
}
//----------------------------------------------------------------------------------------------------
//задать индекс
//----------------------------------------------------------------------------------------------------
void CTask::SetIndex(const long& index)
{
 Index=index;
}
//----------------------------------------------------------------------------------------------------
//задать уникальный идентификатор от какого пользователя задание
//----------------------------------------------------------------------------------------------------
void CTask::SetFromUserGUID(const char *from_user_guid)
{
 FromUserGUID=from_user_guid;
}
//----------------------------------------------------------------------------------------------------
//задать уникальный идентификатор для какого пользователя задание
//----------------------------------------------------------------------------------------------------
void CTask::SetForUserGUID(const char *for_user_guid)
{
 ForUserGUID=for_user_guid;
}
//----------------------------------------------------------------------------------------------------
//задать уникальный идентификатор проекта
//----------------------------------------------------------------------------------------------------
void CTask::SetProjectGUID(const char *project_guid)
{
 ProjectGUID=project_guid;
}
//----------------------------------------------------------------------------------------------------
//задать задание
//----------------------------------------------------------------------------------------------------
void CTask::SetTask(const char *task)
{
 Task=task;
}
//----------------------------------------------------------------------------------------------------
//получиь состояние задания
//----------------------------------------------------------------------------------------------------
void CTask::SetState(const long &state)
{
 State=state;
}
//----------------------------------------------------------------------------------------------------
//задать срок задания
//----------------------------------------------------------------------------------------------------
void CTask::SetDate(const CDate &cDate_Set)
{
 cDate=cDate_Set;
}
//----------------------------------------------------------------------------------------------------
//задать уникальный идентификатор задания
//----------------------------------------------------------------------------------------------------
void CTask::SetTaskGUID(const char *task_guid)
{
 TaskGUID=task_guid;
}
//----------------------------------------------------------------------------------------------------
//задать ответ на задание
//----------------------------------------------------------------------------------------------------
void CTask::SetAnswer(const char *answer)
{
 Answer=answer;
}
//----------------------------------------------------------------------------------------------------
//задать ссылку на файл в ответе исполнителя
//----------------------------------------------------------------------------------------------------
void CTask::SetAnswerReference(const char *reference)
{
 AnswerReference=reference;
}
//----------------------------------------------------------------------------------------------------
//задать ссылку на файл в задании
//----------------------------------------------------------------------------------------------------
void CTask::SetTaskReference(const char *reference)
{
 TaskReference=reference;
}
//----------------------------------------------------------------------------------------------------
//задать прочитан ли ответ на задание
//----------------------------------------------------------------------------------------------------
void CTask::SetAnswerNotRead(bool state)
{
 AnswerNotRead=state; 
}
//----------------------------------------------------------------------------------------------------
//задать, является ли задание плановой позицией
//----------------------------------------------------------------------------------------------------
void CTask::SetPlannedPosition(bool state)
{
 PlannedPosition=state;
}
//----------------------------------------------------------------------------------------------------
//задать, есть ли ссылка в ответе исполнителя
//----------------------------------------------------------------------------------------------------
void CTask::SetAnswerReferenceExist(bool state)
{
 AnswerReferenceExist=state;
}
//----------------------------------------------------------------------------------------------------
//задать, есть ли ссылка в задании
//----------------------------------------------------------------------------------------------------
void CTask::SetTaskReferenceExist(bool state)
{
 TaskReferenceExist=state;
}
//----------------------------------------------------------------------------------------------------
//задать, является ли задание общим
//----------------------------------------------------------------------------------------------------
void CTask::SetCommon(bool state)
{
 Common=state;
}
//----------------------------------------------------------------------------------------------------
//установить, изменение статуса общности задания
//----------------------------------------------------------------------------------------------------
void CTask::SetChangeCommonState(bool state)
{
 ChangeCommonState=state;
}
//----------------------------------------------------------------------------------------------------
//это задание от или для пользователя с уникальным идентификатором
//----------------------------------------------------------------------------------------------------
bool CTask::IsFromOrForUserGUID(const char *guid) const
{
 if (ForUserGUID.Compare(const_cast<char*>(guid))==0 || FromUserGUID.Compare(const_cast<char*>(guid))==0) return(true);
 return(false);
}
//----------------------------------------------------------------------------------------------------
//это задание для пользователя с уникальным идентификатором
//----------------------------------------------------------------------------------------------------
bool CTask::IsForUserGUID(const char *guid) const
{
 if (ForUserGUID.Compare(const_cast<char*>(guid))==0) return(true);
 return(false);
}
//----------------------------------------------------------------------------------------------------
//верный ли TaskGUID
//----------------------------------------------------------------------------------------------------
bool CTask::IsTaskGUID(const char *guid) const
{
 if (TaskGUID.Compare(const_cast<char*>(guid))==0) return(true);    
 return(false);
}
//----------------------------------------------------------------------------------------------------
//прочитан ли ответ на задание
//----------------------------------------------------------------------------------------------------
bool CTask::IsAnswerNotRead(void) const
{
 return(AnswerNotRead);
}
//----------------------------------------------------------------------------------------------------
//является ли задание плановой позицией
//----------------------------------------------------------------------------------------------------
bool CTask::IsPlannedPosition(void) const
{
 return(PlannedPosition);
}
//----------------------------------------------------------------------------------------------------
//есть ли ссылка в ответе исполнителя
//----------------------------------------------------------------------------------------------------
bool CTask::IsAnswerReferenceExist(void) const
{
 return(AnswerReferenceExist);
}
//----------------------------------------------------------------------------------------------------
//есть ли ссылка в задании
//----------------------------------------------------------------------------------------------------
bool CTask::IsTaskReferenceExist(void) const
{
 return(TaskReferenceExist);
}
//----------------------------------------------------------------------------------------------------
//является ли задание общим
//----------------------------------------------------------------------------------------------------
bool CTask::IsCommon(void) const
{
 return(Common);
}
//----------------------------------------------------------------------------------------------------
//был ли изменён статус общности задания
//----------------------------------------------------------------------------------------------------
bool CTask::IsChangeCommonState(void) const
{
 return(ChangeCommonState);
}
